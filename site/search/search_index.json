{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Airbnb App Documentation Project Summary This case study project was undertaken during the Data Masterclass Bootcamp organised by Pfizer and Code.Hub in the period of Sept-Nov 2022. The project involves building a model that predicts the prices of an Airbnb listing in Athens. A RESTful API build with Flask is used to deploy the model and the UI of the app is based on the React library and its extensive ecosystem.","title":"Home"},{"location":"index.html#airbnb-app-documentation","text":"Project Summary This case study project was undertaken during the Data Masterclass Bootcamp organised by Pfizer and Code.Hub in the period of Sept-Nov 2022. The project involves building a model that predicts the prices of an Airbnb listing in Athens. A RESTful API build with Flask is used to deploy the model and the UI of the app is based on the React library and its extensive ecosystem.","title":"Airbnb App Documentation"},{"location":"Acknowledgements/ack.html","text":"Acknowledgemnts Contributors \u2728 imanousar \ud83d\udcbb jenny-cobanaj \ud83d\udcbb Special Thanks \u2728 This project wouldn't be possible without the help and guidance of: Thanos Tagaris Tasos Papagiannis Karolos Koutsoulelos Giannis Tsevdos","title":"Acks"},{"location":"Dataset/eda.html","text":"EDA The dataset contains 67 columns and 9582 rows and was last scraped 2021-10-26 from the Inside Airbnb . The dataset contains many features for which you can find more information here . Two features were added. The distance of a listing from Acropolis and Syntagma, two famous sightseeings in Athens. Explore the data Price The target variable price is skewed right and thus we perfrom a log transformation for a better understanding. Price Log Price Missing values Missing values Spatial Features Distance from Acropolis vs Price Distance from Syntagma vs Price Other features Distributions of some important features of the dataset Distributions Features Correlation Correlation","title":"EDA"},{"location":"Dataset/eda.html#explore-the-data","text":"","title":"Explore the data"},{"location":"Dataset/eda.html#price","text":"The target variable price is skewed right and thus we perfrom a log transformation for a better understanding. Price Log Price","title":"Price"},{"location":"Dataset/eda.html#missing-values","text":"Missing values","title":"Missing values"},{"location":"Dataset/eda.html#spatial-features","text":"Distance from Acropolis vs Price Distance from Syntagma vs Price","title":"Spatial Features"},{"location":"Dataset/eda.html#other-features","text":"Distributions of some important features of the dataset Distributions","title":"Other features"},{"location":"Dataset/eda.html#features-correlation","text":"Correlation","title":"Features Correlation"},{"location":"Deployment/deploy.html","text":"Deployment For the deployment we used netlify for the React Web App and heroku for the Flask REST API . You can visit our app here: Airbnb-Price-Prediction-App App architecture","title":"Deployment"},{"location":"Deployment/deploy.html#deployment","text":"For the deployment we used netlify for the React Web App and heroku for the Flask REST API . You can visit our app here: Airbnb-Price-Prediction-App","title":"Deployment"},{"location":"Deployment/deploy.html#app-architecture","text":"","title":"App architecture"},{"location":"Install/install.html","text":"Install Here you can find detailed information of how to install this app locally First you need to download the repo git clone <repo-url> Flask App Init the app Create a virtual environment in the flask folder. cd flask python -m venv venv source venv\\Scripts\\activate Install the necessary libraries. pip install -r requirements.txt Local Run In the top level of the directory of airbnb_app fire up a terminal and execute: python app.py The app normally runs at http://127.0.0.1:5000. React UI cd react npm install npm start The UI usually runs at http:// http://127.0.0.1:3000. Enjoy! :D","title":"Install"},{"location":"Install/install.html#flask-app","text":"Init the app Create a virtual environment in the flask folder. cd flask python -m venv venv source venv\\Scripts\\activate Install the necessary libraries. pip install -r requirements.txt Local Run In the top level of the directory of airbnb_app fire up a terminal and execute: python app.py The app normally runs at http://127.0.0.1:5000.","title":"Flask App"},{"location":"Install/install.html#react-ui","text":"cd react npm install npm start The UI usually runs at http:// http://127.0.0.1:3000. Enjoy! :D","title":" React UI  "},{"location":"Machine%20Learning/ml.html","text":"Machine Learning Machine Learning Algorithms Different Machine Learning Algorithms were used. A complete list can be found below: Lasso Regression Linear Regression Random Forest Extra-Trees XGBoost LightGbm ANN Random Forest with Message Passing XGBoost with Message Passing MLP with Message Passing Graph Attention Networks Machine Learning Pipeline For the training of the models the following techniques were used: Grid Search or Halve Grid Search 4 Folds Cross Validation Evaluation The metrics used for the evaluation are: MAE , MAPE Results Model MAE MAPE Lasso Regression 10.889 0.261 Linear Regression 10.890 0.261 Random Forest Regressor 9.692 0.223 Extra Trees Regressor 10.519 0.238 LightGBM 9.447 0.214 XGBoost 9.136 0.209 Message Passing RF 10.248 0.241 Message Passing XGBoost 10.467 0.236 Message MLP 12.415 0.291 Graph Attention Network 10.659 0.236","title":"Machine Learning"},{"location":"Machine%20Learning/ml.html#machine-learning-algorithms","text":"Different Machine Learning Algorithms were used. A complete list can be found below: Lasso Regression Linear Regression Random Forest Extra-Trees XGBoost LightGbm ANN Random Forest with Message Passing XGBoost with Message Passing MLP with Message Passing Graph Attention Networks","title":"Machine Learning Algorithms"},{"location":"Machine%20Learning/ml.html#machine-learning-pipeline","text":"For the training of the models the following techniques were used: Grid Search or Halve Grid Search 4 Folds Cross Validation","title":"Machine Learning Pipeline"},{"location":"Machine%20Learning/ml.html#evaluation","text":"The metrics used for the evaluation are: MAE , MAPE","title":"Evaluation"},{"location":"Machine%20Learning/ml.html#results","text":"Model MAE MAPE Lasso Regression 10.889 0.261 Linear Regression 10.890 0.261 Random Forest Regressor 9.692 0.223 Extra Trees Regressor 10.519 0.238 LightGBM 9.447 0.214 XGBoost 9.136 0.209 Message Passing RF 10.248 0.241 Message Passing XGBoost 10.467 0.236 Message MLP 12.415 0.291 Graph Attention Network 10.659 0.236","title":"Results"},{"location":"Preprocessing/preprocessing.html","text":"Preprocessing PS: For the tree based methods the data was used without scaling.","title":"Preprocessing"},{"location":"REST%20API/flask.html","text":"Flask App Project Code Structure Top level app.py : Applications entrypoint. Used to start the webserver. Here we register our blueprints airbnb_base_logger.py : Logger for incoming information Controllers One file per logical unit: ping : Typical ping endpoint. stats : Declares the endpoint where we can request the statistics. models : Accepts data for an individual Airbnb listing and returns a predicted price. airbnb : Supports basic HTTP requests. GET, POST (to be implemented), DELETE an airbnb based on id. Repo The data storage of the application. Should include the airbnb.csv initially. In case you delete or update something on the dataset, you can always replace it with the original_airbnb_copy.csv and bring it to its original state. Here you can find and the trained-model that runs in the background for the price prediction Services The business logic of our app. stats : Functions that calculate several stats based on aggregations by utilized the pandas lib. models : Functions that perform all the preprocessing on the input data and use the pre-trained model to predict the price of the listing. aibnb : Mappings, utilities and anything else needed to work with the airbnb resource. Test Execute basic tests for the app. python -m pytest Execute stress tests pip install locust uvicorn python app.py locust --host http://localhost:5000 -f tests/stress/benchmark.py or run test resuls on the terminal. Ex. 10 users with spanning rate 5. locust --host http://localhost:5000 -f tests/stress/benchmark.py --headless --host http://localhost:5000 -u 10 -r 5 From here you get a user interface. It's typically available at 0.0.0.0:8089 unless you've changed the port number.","title":"REST API"},{"location":"REST%20API/flask.html#top-level","text":"app.py : Applications entrypoint. Used to start the webserver. Here we register our blueprints airbnb_base_logger.py : Logger for incoming information","title":"Top level"},{"location":"REST%20API/flask.html#controllers","text":"One file per logical unit: ping : Typical ping endpoint. stats : Declares the endpoint where we can request the statistics. models : Accepts data for an individual Airbnb listing and returns a predicted price. airbnb : Supports basic HTTP requests. GET, POST (to be implemented), DELETE an airbnb based on id.","title":"Controllers"},{"location":"REST%20API/flask.html#repo","text":"The data storage of the application. Should include the airbnb.csv initially. In case you delete or update something on the dataset, you can always replace it with the original_airbnb_copy.csv and bring it to its original state. Here you can find and the trained-model that runs in the background for the price prediction","title":"Repo"},{"location":"REST%20API/flask.html#services","text":"The business logic of our app. stats : Functions that calculate several stats based on aggregations by utilized the pandas lib. models : Functions that perform all the preprocessing on the input data and use the pre-trained model to predict the price of the listing. aibnb : Mappings, utilities and anything else needed to work with the airbnb resource.","title":"Services"},{"location":"REST%20API/flask.html#test","text":"Execute basic tests for the app. python -m pytest Execute stress tests pip install locust uvicorn python app.py locust --host http://localhost:5000 -f tests/stress/benchmark.py or run test resuls on the terminal. Ex. 10 users with spanning rate 5. locust --host http://localhost:5000 -f tests/stress/benchmark.py --headless --host http://localhost:5000 -u 10 -r 5 From here you get a user interface. It's typically available at 0.0.0.0:8089 unless you've changed the port number.","title":"Test"},{"location":"Web%20App/react.html","text":"React UI Project App details The application was created with create-react-app . The below 4 libraries were added: Ant design - for UI library/components React Router - for client-side (browser) routing recharts - for building charts axios - for HTTP requests Routes The routes of the UI are: Teams : A simple page showing the members of this project. Models : A page in which the user can make a POST request with different airbnb attributes and get a price prediction. Stats : Statistics for the Airbnb listings in Athens. Airbnb : Under costruction.","title":"Web App"},{"location":"Web%20App/react.html#app-details","text":"The application was created with create-react-app . The below 4 libraries were added: Ant design - for UI library/components React Router - for client-side (browser) routing recharts - for building charts axios - for HTTP requests","title":"App details"},{"location":"Web%20App/react.html#routes","text":"The routes of the UI are: Teams : A simple page showing the members of this project. Models : A page in which the user can make a POST request with different airbnb attributes and get a price prediction. Stats : Statistics for the Airbnb listings in Athens. Airbnb : Under costruction.","title":"Routes"}]}